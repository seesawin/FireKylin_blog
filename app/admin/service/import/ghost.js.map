{
    "version": 3,
    "sources": [
        "../../../../src/admin/service/import/ghost.js"
    ],
    "names": [
        "GHOST_POST_STATUS",
        "published",
        "draft",
        "user",
        "users",
        "Array",
        "isArray",
        "usersPromise",
        "map",
        "userModelInstance",
        "addUser",
        "username",
        "slug",
        "email",
        "display_name",
        "name",
        "password",
        "DEFAULT_USER_PWD",
        "type",
        "status",
        "all",
        "length",
        "post",
        "posts",
        "post_tags",
        "filter",
        "item",
        "page",
        "postsPromise",
        "userSlug",
        "id",
        "author_id",
        "where",
        "find",
        "retTag",
        "tag",
        "post_id",
        "tag_id",
        "title",
        "pathname",
        "content",
        "html",
        "summary",
        "create_time",
        "formatDate",
        "Date",
        "created_at",
        "update_time",
        "updated_at",
        "user_id",
        "comment_num",
        "allow_comment",
        "is_public",
        "Number",
        "visibility",
        "markdown_content",
        "toMarkdown",
        "postModelInstance",
        "addPost",
        "console",
        "log",
        "pages",
        "pagesPromise",
        "authors",
        "author",
        "pageModelInstance",
        "tags",
        "tagsPromise",
        "tagModelInstance",
        "addTag",
        "category",
        "parseFile",
        "file",
        "jsonObj",
        "think",
        "safeRequire",
        "path",
        "db",
        "data",
        "e",
        "Error",
        "run",
        "importData"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/service/import/ghost.js",
    "sourcesContent": [
        "import Base from './base';\n\nconst GHOST_POST_STATUS = {\n  published: 3, //发布\n  draft: 0 //草稿\n};\n\nexport default class extends Base {\n  /**\n   * 导入用户\n   */\n  async user({users}) {\n    if( !users || !Array.isArray(users) ) {\n      return 0;\n    }\n    \n    const usersPromise = users.map(user => this.userModelInstance.addUser({\n      username: user.slug,\n      email: user.email,\n      display_name: user.name,\n      password: Base.DEFAULT_USER_PWD,\n      type: 2, //默认导入用户都为编辑\n      status: 2, //默认导入用户都处于禁用状态\n    }, '127.0.0.1'));\n    await Promise.all(usersPromise);\n\n    return users.length;\n  }\n\n  /**\n   * 导入文章\n   */\n  async post({posts, users, post_tags}) {\n    if(!Array.isArray(posts) || !Array.isArray(users)) {\n      return 0;\n    }\n\n    if(!Array.isArray(post_tags)) {\n      post_tags = [];\n    }\n\n    posts = posts.filter(item => item.page === 0);\n    const postsPromise = posts.map(async item => {\n      try{\n        //获取用户和标签\n        const userSlug = users.filter(user => user.id === item.author_id)[0].slug;\n        const user = await this.userModelInstance.where({ name: userSlug }).find();\n        const retTag = post_tags.filter(tag => tag.post_id === item.id).map(tag => tag.tag_id);\n\n        const post = {\n          title: item.title,\n          pathname: item.slug,\n          content: item.html,\n          summary: item.html,\n          create_time: this.formatDate(new Date(item.created_at)),\n          update_time: this.formatDate(new Date(item.updated_at)),\n          status: GHOST_POST_STATUS[item.status] || 0,\n          user_id: user.id,\n          comment_num: 0,\n          allow_comment: 1,\n          is_public: Number(item.visibility === 'public'),\n          tag: retTag\n        };\n        post.markdown_content = this.toMarkdown(post.content);\n        await this.postModelInstance.addPost(post);\n      } catch(e) { console.log(e)}\n    });\n    Promise.all(postsPromise);\n    \n    return posts.length;\n  }\n\n  /**\n   * 导入页面\n   */\n  async page({posts}) {\n    if(!Array.isArray(posts)) {\n      return 0;\n    }\n\n    const pages = posts.filter(item => item.page === 1);\n    const pagesPromise = pages.map(async item => {\n      const userSlug = authors.filter(author => author.id === item.author_id)[0].slug;\n      const user = await this.userModelInstance.where({ name: userSlug }).find();\n\n      const page = {\n        title: item.title,\n        pathname: item.slug,\n        content: item.html,\n        summary: item.html,\n        create_time: this.formatDate(new Date(item.created_at)),\n        update_time: this.formatDate(new Date(item.updated_at)),\n        status: GHOST_POST_STATUS[item.status] || 0,\n        user_id: user.id,\n        comment_num: 0,\n        allow_comment: 1,\n        is_public: Number(item.visibility === 'public')\n      };\n      page.markdown_content = this.toMarkdown(page.content);\n      await this.pageModelInstance.addPost(page);\n    });\n    Promise.all(pagesPromise);\n\n    return pages.length;\n  }\n\n  /**\n   * 导入标签\n   */\n  async tag({tags}) {\n    if(!tags || !Array.isArray(tags)) {\n      return 0;\n    }\n\n    const tagsPromise = tags.map(tag => this.tagModelInstance.addTag({\n      name: tag.name,\n      pathname: tag.slug\n    }));\n    await Promise.all(tagsPromise);\n    \n    return tags.length;\n  }\n\n  /**\n   * 导入分类\n   */\n  async category() {\n    return 0;\n  }\n\n  /**\n   * 处理上传文件获取导入数据\n   */\n  parseFile(file) {\n    try {\n      const jsonObj = think.safeRequire(file.path);\n      return jsonObj.db[0].data\n    } catch(e) {\n      throw Error('INVALID_FILE');\n    }\n  }\n\n  /**\n   * 执行导入\n   */\n  async run(file) {\n    return await this.importData(this.parseFile(file));\n  }\n}\n"
    ]
}