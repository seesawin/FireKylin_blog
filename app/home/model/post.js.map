{
    "version": 3,
    "sources": [
        "../../../src/home/model/post.js"
    ],
    "names": [
        "relation",
        "cate",
        "type",
        "think",
        "model",
        "MANY_TO_MANY",
        "field",
        "tag",
        "user",
        "BELONG_TO",
        "init",
        "args",
        "getOptions",
        "feedFullText",
        "postsListSize",
        "getWhereCondition",
        "where",
        "extend",
        "is_public",
        "status",
        "create_time",
        "datetime",
        "getPostList",
        "page",
        "options",
        "count",
        "name",
        "setRelation",
        "find",
        "id",
        "isEmpty",
        "join",
        "table",
        "as",
        "on",
        "order",
        "countSelect",
        "getPostDetail",
        "pathname",
        "fieldReverse",
        "detail",
        "createTime",
        "prevWhere",
        "prevPromise",
        "nextWhere",
        "nextPromise",
        "all",
        "prev",
        "next",
        "getPostRssList",
        "optionModel",
        "limit",
        "select",
        "data",
        "getPostSitemapList",
        "getPostArchive",
        "result",
        "forEach",
        "yearMonth",
        "item",
        "push",
        "getPostSearch",
        "keyword"
    ],
    "mappings": "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",
    "file": "../../../src/home/model/post.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.relation {\n  /**\n   * relation\n   * @type {Object}\n   */\n  relation = {\n    cate: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name'\n    },\n    tag: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name'\n    },\n    user: {\n      type: think.model.BELONG_TO,\n      field: 'id,name,display_name'\n    }\n  };\n\n  async init(...args) {\n    super.init(...args);\n    let {feedFullText, postsListSize} = await this.model('options').getOptions();\n    this.feedFullText = feedFullText;\n    this.postsListSize = +postsListSize;\n  }\n  /**\n   * get where condition\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  getWhereCondition(where){\n    where = think.extend({}, where, {\n      is_public: 1, //公开\n      type: 0, //文章\n      status: 3 //已经发布\n    });\n    if(!where.create_time){\n      where.create_time = {\n        '<=': think.datetime()\n      };\n    }\n    return where;\n  }\n  /**\n   * get post list\n   * @param  {[type]} page  [description]\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  async getPostList(page, options = {}){\n    page = page | 0 || 1;\n\n    let field = options.field || 'id,title,pathname,create_time,summary,comment_num';\n    if( (await this.model('user').count()) > 1 ) { field += ',user_id'; }\n\n    if(options.tag || options.cate){\n      let name = options.tag ? 'tag' : 'cate';\n      let {id} = await this.model(name).field('id').setRelation(false).where({name: options.tag || options.cate}).find();\n      if(think.isEmpty(id)){\n        return false;\n      }\n      let where = this.getWhereCondition({[`${name}.${name}_id`]: id});\n      return this.join({\n        table: `post_${name}`,\n        as: name,\n        on: ['id', 'post_id']\n      }).where(where).order('create_time DESC').page(page, this.postsListSize).countSelect();\n    }\n\n    let where = this.getWhereCondition(options.where);\n    // only cache first page post\n    // if(page === 1){\n    //   return think.cache('post_1', () => {\n    //     return this.field(field).page(page, this.postsListSize).setRelation(false).order('create_time DESC').where(where).countSelect();\n    //   },{timeout:259200});\n    // }\n\n    return this.field(field).page(page, this.postsListSize).setRelation('user').order('create_time DESC').where(where).countSelect();\n  }\n\n  /**\n   * get post detail info\n   * @param  {[type]} pathname [description]\n   * @return {[type]}          [description]\n   */\n  async getPostDetail(pathname){\n    let where = this.getWhereCondition({pathname});\n    let detail = await this.where(where).fieldReverse('markdown_content,summary').find();\n    if(think.isEmpty(detail)){\n      return detail;\n    }\n    let createTime = think.datetime(detail.create_time);\n    let prevWhere = this.getWhereCondition({\n      create_time: ['<', createTime],\n      id: ['!=', detail.id]\n    });\n    let prevPromise = this.field('title,pathname').setRelation(false).where(prevWhere).order('create_time DESC').find();\n    let nextWhere = this.getWhereCondition({\n      create_time: ['>', createTime],\n      id: ['!=', detail.id]\n    });\n    let nextPromise = this.field('title,pathname').setRelation(false).where(nextWhere).order('create_time ASC').find();\n    let [prev, next] = await Promise.all([prevPromise, nextPromise]);\n    detail.prev = prev;\n    detail.next = next;\n    return detail;\n  }\n  async getPostRssList(){\n    let {feedFullText} = await this.optionModel.getOptions();\n    let field = 'id,title,pathname,create_time,';\n    let where = this.getWhereCondition();\n\n    if( feedFullText === '0' ) {\n      field += 'summary,content';\n    } else {\n      field = 'content';\n    }\n\n    let data = await this.field(field).where(where).order('create_time DESC').setRelation(false).limit(10).select();\n    return data;\n  }\n\n  async getPostSitemapList(){\n    let field = 'pathname,update_time';\n    let where = this.getWhereCondition();\n\n    let data = await this.field(field).where(where).order('update_time DESC').setRelation(false).select();\n    return data;\n  }\n  /**\n   * get post archive\n   * @return {[type]} [description]\n   */\n  async getPostArchive(){\n    let where = this.getWhereCondition();\n    let data = await this.field('id,title,pathname,create_time').order('create_time DESC').setRelation(false).where(where).select();\n    let result = {};\n    data.forEach(item => {\n      let yearMonth = think.datetime(item.create_time, 'YYYY年MM月');\n      if(!(yearMonth in result)){\n        result[yearMonth] = [];\n      }\n      result[yearMonth].push(item);\n    });\n    return result;\n  }\n  /**\n   * get post search result\n   * @param  {[type]} keyword [description]\n   * @param  {[type]} page    [description]\n   * @return {[type]}         [description]\n   */\n  async getPostSearch(keyword, page){\n    let where = {'title|content': ['LIKE', `%${keyword}%`]}\n    where = this.getWhereCondition(where);\n    return this.where(where).page(page, this.postsListSize).setRelation(false).field('title,pathname,summary,create_time').order('create_time DESC').countSelect();\n  }\n}\n"
    ]
}